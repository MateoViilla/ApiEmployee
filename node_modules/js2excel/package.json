{
  "_from": "js2excel",
  "_id": "js2excel@1.0.1",
  "_inBundle": false,
  "_integrity": "sha512-B8G2WkA7pplLNo0kL7kNJCYSEejWVCRwVhLZi7zubyKNTiZpT6mXTFuRlwStR6UlYag5W7J9wUEAxf5cke4O3A==",
  "_location": "/js2excel",
  "_phantomChildren": {
    "exit-on-epipe": "1.0.1",
    "printj": "1.1.2"
  },
  "_requested": {
    "escapedName": "js2excel",
    "fetchSpec": "latest",
    "name": "js2excel",
    "raw": "js2excel",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/js2excel/-/js2excel-1.0.1.tgz",
  "_shasum": "6fa7dc680fea5468ddab764288d403ff964a9c31",
  "_shrinkwrap": null,
  "_spec": "js2excel",
  "_where": "C:\\Users\\Mateo\\Desktop\\JS\\Tinfor\\ApiTinfor",
  "author": {
    "name": "pomysky@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/dwqs/js2excel/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "babel-preset-stage-2": "^6.24.1",
    "file-saver": "^1.3.8",
    "xlsx": "^0.10.9"
  },
  "deprecated": false,
  "description": "A simple module for excel and json converts each other",
  "devDependencies": {
    "@types/file-saver": "0.0.1",
    "@types/xlsx": "^0.0.34",
    "awesome-typescript-loader": "3.2.1",
    "babel-core": "^6.25.0",
    "babel-loader": "^7.1.1",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-es2015": "^6.24.1",
    "debug": "^2.6.8",
    "eslint": "^4.1.1",
    "html-webpack-plugin": "^2.29.0",
    "husky": "^0.14.2",
    "rollup": "^0.43.0",
    "rollup-plugin-babel": "^2.7.1",
    "rollup-plugin-commonjs": "^8.4.1",
    "rollup-plugin-node-builtins": "^2.1.2",
    "rollup-plugin-node-resolve": "^3.3.0",
    "rollup-plugin-typescript": "^0.8.1",
    "rollup-plugin-uglify": "^2.0.1",
    "tslint": "^5.4.3",
    "typescript": "^2.4.1",
    "webpack": "3.10.0"
  },
  "engines": {
    "node": ">= 6.0.0",
    "npm": ">= 4.0.0"
  },
  "homepage": "https://github.com/dwqs/js2excel#readme",
  "keywords": [
    "excel",
    "json",
    "xlsx"
  ],
  "license": "MIT",
  "main": "dist/js2excel.min.js",
  "name": "js2excel",
  "optionalDependencies": {},
  "private": false,
  "readme": "![download](https://img.shields.io/npm/dt/js2excel.svg) ![npm-version](https://img.shields.io/npm/v/js2excel.svg) ![license](https://img.shields.io/npm/l/js2excel.svg) ![bower-license](https://img.shields.io/bower/l/js2excel.svg)\n\n## js2excel\nA simple module for excel and json converts each other.\n\n## Installation\n\nIt is recommended to run webpack on node 6.x or higher.\n\nInstall the pkg with npm:\n\n```\nnpm install js2excel --save\n```\n\nor yarn\n\n```\nyarn add js2excel\n```\n\nor bower\n\n```\nbower install js2excel\n```\n\n## Usage\n\n### Convert json to excel\n```\n// es6\nimport {json2excel, excel2json} from 'js2excel';\n\n//CommonJS\nlet { json2excel, excel2json } = require('js2excel');\n\n// excel's data will be exports, which you probably get it from server.\nlet data = [\n    {\n        \"userId\": 1,\n        \"userPhoneNumber\": 1888888888,\n        \"userAddress\": 'xxxx',\n        \"date\": '2013/09/10 09:10'  // string\n    },\n    {\n        \"userId\": 2,\n        \"userPhoneNumber\": 1888888888,\n        \"userAddress\": 'xxxx',\n        \"date\": new Date()\n    },\n    {\n        \"userId\": 3,\n        \"userPhoneNumber\": 1888888888,\n        \"userAddress\": 'xxxx',\n        \"date\": new Date()\n    }\n];\n\n// this will be export a excel and the file's name is user-info-data.xlsx\n// the default file's name is excel.xlsx\ntry {\n    json2excel({\n        data,\n        name: 'user-info-data',\n        formateDate: 'yyyy/mm/dd'\n    });\n} catch (e) {\n    console.error('export error');\n}\n\n// for webpack 3: dynamic import\nimport(/* webpackChunkName: \"js2excel\" */ 'js2excel').then(({json2excel}) => {\n    json2excel({\n        data,\n        name: 'test',\n        formateDate: 'dd/mm/yyyy'\n    });\n}).catch((e) => {\n\n});\n```\nExports result as the image shows:\n\n![test-data](https://sfault-image.b0.upaiyun.com/148/574/1485742647-5961130140811_articlex)\n\n### Convert excel(.numbers/.xlsx/.xls) to json\n```\nimport { excel2json } from 'js2excel';\n\n// html\n<input type=\"file\" multiple=\"false\" id=\"sheets\" accept=\"application/x-iwork-keynote-sffnumbers,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" @change=\"onchange\" />\n\n// methods\nonchange(e){\n    excel2json(e.target.files, (data) => {\n        console.log('json', data)\n    }, 'excel2json')\n}\n\n// for webpack 3: dynamic import\nonchange(e) {\n    import(/* webpackChunkName: \"js2excel\" */ 'js2excel').then(({excel2json}) => {\n        excel2json(e.target.files, (data) => {\n            console.log('json', data)\n        }, 'excel2json')\n    }).catch((e) => {\n\n    });\n}\n```\nExample, if you hava a excel as following:\n\n![excel](https://sfault-image.b0.upaiyun.com/411/420/4114209136-5960fa90e8e6d_articlex)\n\nThe data maybe as following:\n\n![data](https://sfault-image.b0.upaiyun.com/314/083/3140838997-5960fabf7c7b0_articlex)\n\n## API\n\n### json2excel(opts)\nConvert json to excel(.xlsx).\n\n**opts**\nType: `Object`\n\n`opts.data`\n\nType: `Array`<br/>\nDefault: `[]`\n\nExcel's  data.\n\n`opts.name`\n\nType: `String`<br/>\nDefault: `excel`\n\nExcel's name, whose suffix is `.xlsx`.\n\n`opts.formateDate`\n\nType: `String` <br/>\nDefault: `dd/mm/yyyy`\n\nThe date formate in rows' data. Examples:\n\n```\n'dd/mm/yyyy' => 08/07/2017\n'd/m/yy' => 8/7/17\n'd/m/yy hh:ss' => 8/7/17 18:29\n'yyyy/mm/dd hh:ss' => 2017/07/17 18:29\n```\n\n### excel2json(files, cb(data), [defval])\nConvert excel(.numbers/.xlsx/.xls) to json.\n\n**files**\n\nType: `Array`\n\n[FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList) from `<input type='file' multiple=\"false\" >`.\n\n**cb(data)**\n\nType: `Function`\n\nCallback function called on finish. The `data` maybe as following:\n\n```\n{   \n    `${sheetName}`: `[${excelRowsData}]`\n    'sheet1': [/** excel rows' data **/],\n    'sheet2': [/** excel rows' data **/],\n    'sheet3': [/** excel rows' data **/]\n    ...\n}\n```\n\n**defval**\n\nType: `String`<br/>\nDefault: `''`\n\nThe default value when the row data corresponding to the column is blank.\n\n### csv2json(files, cb(data), [encode])\nConvert CSV file to json.\n\n**files**\n\nType: `Array`\n\n[FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList) from `<input type='file' multiple=\"false\" >`.\n\n**cb(data)**\n\nType: `Function`\n\nCallback function called on finish.\n\n**encode**\n\nType: `String`<br/>\nDefault: `UTF-8`\n\nThe default encode when reading file.\n\n## Supported browsers\n* [FileSaver#supported-browsers](https://github.com/eligrey/FileSaver.js#supported-browsers)\n* [FileReader](https://caniuse.com/#search=FileReader)\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dwqs/js2excel.git"
  },
  "scripts": {
    "build": "rollup -c && ./node_modules/.bin/rollup -c rollup.build.config.js",
    "clean": "rm -rf dist typings types",
    "dev": "webpack --config ./webpack.example.config.js -w --progress --display-error-details",
    "fix": "tslint -p ./tsconfig.json --type-check --fix src/**/*.ts",
    "lint": "tslint -p ./tsconfig.json --type-check src/**/*.ts",
    "postbuild": "mkdir types && mv typings/index.d.ts types/ && rm -rf typings",
    "prebuild": "npm run prepush && ./node_modules/.bin/tsc -p ./tsconfig.typings.json",
    "prepublishOnly": "npm run clean && npm run build",
    "prepush": "npm run lint"
  },
  "typings": "types/index.d.ts",
  "version": "1.0.1"
}
